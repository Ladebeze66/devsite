import qs from "qs"; // Importation de qs pour construire des requ√™tes de cha√Æne de requ√™te

// Fonction pour r√©cup√©rer une comp√©tence sp√©cifique
export async function fetchDataCompetences(collection: string, slug: string) {
  // Construction de la requ√™te avec des filtres et des relations √† peupler
  const query = qs.stringify({
    filters: {
      slug: { $eq: slug },
    },
    populate: "picture", // On garde les images des comp√©tences
  });

  // Log de la requ√™te API pour le d√©bogage
  console.log(`üõ†Ô∏è Requ√™te API Comp√©tence : http://localhost:1337/api/${collection}?${query}`);

  try {
    // Envoi de la requ√™te √† l'API Strapi
    const response = await fetch(`http://localhost:1337/api/${collection}?${query}`, {
      cache: "no-store",
    });

    // V√©rification de la r√©ponse de l'API
    if (!response.ok) {
      throw new Error(`Failed to fetch competences data: ${response.status}`);
    }

    // R√©cup√©ration des donn√©es de la r√©ponse
    const data = await response.json();
    console.log("‚úÖ Donn√©es re√ßues (Comp√©tence) :", data);

    // Retourne la premi√®re comp√©tence ou null si aucune donn√©e n'est trouv√©e
    return data.data[0] || null;
  } catch (error) {
    // Gestion des erreurs et log des erreurs
    console.error("‚ùå Erreur lors de la r√©cup√©ration des comp√©tences :", error);
    return null;
  }
}

// Fonction pour r√©cup√©rer les donn√©es du glossaire
export async function fetchDataGlossaire() {
  try {
    // Log de la requ√™te API pour le d√©bogage
    console.log("üõ†Ô∏è Requ√™te API Glossaire : http://localhost:1337/api/glossaires?populate=images");

    // Envoi de la requ√™te √† l'API Strapi
    const response = await fetch("http://localhost:1337/api/glossaires?populate=images", {
      cache: "no-store",
    });

    // V√©rification de la r√©ponse de l'API
    if (!response.ok) {
      throw new Error(`Failed to fetch glossaire data: ${response.status}`);
    }

    // R√©cup√©ration des donn√©es de la r√©ponse
    const data = await response.json();
    console.log("‚úÖ Donn√©es re√ßues (Glossaire) :", data);

    // Retourne les donn√©es du glossaire ou un tableau vide si aucune donn√©e n'est trouv√©e
    return data.data || [];
  } catch (error) {
    // Gestion des erreurs et log des erreurs
    console.error("‚ùå Erreur lors de la r√©cup√©ration du glossaire :", error);
    return [];
  }
}